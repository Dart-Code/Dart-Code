{
	"name": "dart-code",
	"displayName": "Dart",
	"description": "Dart language support and debugger for Visual Studio Code.",
	"version": "3.34.0-dev",
	"publisher": "Dart-Code",
	"engines": {
		"vscode": "^1.63.0"
	},
	"extensionKind": [
		"workspace"
	],
	"capabilities": {
		"virtualWorkspaces": {
			"supported": "limited",
			"description": "Some functionality may be limited for remote files in virtual workspaces."
		},
		"untrustedWorkspaces": {
			"supported": false
		}
	},
	"license": "SEE LICENSE IN LICENSE",
	"bugs": {
		"url": "https://github.com/Dart-Code/Dart-Code/issues"
	},
	"homepage": "https://dartcode.org/",
	"repository": {
		"type": "git",
		"url": "https://github.com/Dart-Code/Dart-Code.git"
	},
	"categories": [
		"Programming Languages",
		"Snippets",
		"Linters",
		"Formatters",
		"Debuggers"
	],
	"keywords": [
		"dart",
		"flutter",
		"fuchsia",
		"multi-root ready"
	],
	"icon": "media/dart.png",
	"activationEvents": [
		"onLanguage:dart",
		"workspaceContains:pubspec.yaml",
		"workspaceContains:*/pubspec.yaml",
		"workspaceContains:*/*/pubspec.yaml",
		"workspaceContains:*.dart",
		"workspaceContains:*/*.dart",
		"workspaceContains:*/*/*.dart",
		"workspaceContains:dart.sh.create",
		"workspaceContains:flutter.sh.create",
		"workspaceContains:flutter.create",
		"onCommand:flutter.createProject",
		"onCommand:dart.createProject",
		"onCommand:_dart.flutter.createSampleProject",
		"onCommand:flutter.doctor",
		"onCommand:flutter.upgrade",
		"onUri",
		"onDebugDynamicConfigurations"
	],
	"main": "./out/dist/extension",
	"contributes": {
		"languages": [
			{
				"id": "dart",
				"extensions": [
					".dart"
				],
				"aliases": [
					"Dart"
				],
				"configuration": "./syntaxes/dart-language-configuration.json"
			}
		],
		"grammars": [
			{
				"language": "dart",
				"scopeName": "source.dart",
				"path": "./syntaxes/dart.json"
			}
		],
		"colors": [
			{
				"id": "dart.closingLabels",
				"description": "The color of the 'closing label' annotations shown against constructor, method invocations and lists that span multiple lines. If not supplied, the color for 'tab.inactiveForeground' will be used.",
				"defaults": {
					"dark": "tab.inactiveForeground",
					"light": "tab.inactiveForeground",
					"highContrast": "tab.inactiveForeground"
				}
			},
			{
				"id": "dart.flutterUiGuides",
				"description": "The color of the Flutter UI Guidelines shown in the editor.",
				"defaults": {
					"dark": "#A3A3A3",
					"light": "#A3A3A3",
					"highContrast": "#A3A3A3"
				}
			}
		],
		"commands": [
			{
				"command": "flutter.createProject",
				"title": "New Project",
				"category": "Flutter"
			},
			{
				"command": "dart.createProject",
				"title": "New Project",
				"category": "Dart"
			},
			{
				"command": "dart.writeRecommendedSettings",
				"title": "Use Recommended Settings",
				"category": "Dart"
			},
			{
				"command": "dart.addDependency",
				"title": "Add Dependency",
				"category": "Dart",
				"icon": "$(add)"
			},
			{
				"command": "dart.addDevDependency",
				"title": "Add Dev Dependency",
				"category": "Dart"
			},
			{
				"command": "_dart.removeDependency",
				"title": "Remove Dependency",
				"category": "Dart"
			},
			{
				"command": "_dart.removeDependencyFromTreeNode",
				"title": "Remove Dependency",
				"category": "Dart"
			},
			{
				"command": "dart.toggleDartdocComment",
				"title": "Toggle Dartdoc Comment",
				"category": "Dart"
			},
			{
				"command": "pub.get",
				"title": "Get Packages",
				"category": "Pub",
				"icon": {
					"light": "./media/commands/get.svg",
					"dark": "./media/commands/get-inverse.svg"
				}
			},
			{
				"command": "dart.task.dartdoc",
				"title": "Generate Documentation",
				"category": "Dart",
				"icon": {
					"light": "./media/commands/documentation.svg",
					"dark": "./media/commands/documentation-inverse.svg"
				}
			},
			{
				"command": "pub.upgrade",
				"title": "Upgrade Packages",
				"category": "Pub",
				"icon": {
					"light": "./media/commands/upgrade.svg",
					"dark": "./media/commands/upgrade-inverse.svg"
				}
			},
			{
				"command": "pub.upgrade.majorVersions",
				"title": "Upgrade Packages (--major-versions)",
				"category": "Pub",
				"icon": {
					"light": "./media/commands/upgrade.svg",
					"dark": "./media/commands/upgrade-inverse.svg"
				}
			},
			{
				"command": "pub.outdated",
				"title": "List Outdated Packages",
				"category": "Pub",
				"icon": {
					"light": "./media/commands/outdated.svg",
					"dark": "./media/commands/outdated-inverse.svg"
				}
			},
			{
				"command": "dart.attach",
				"title": "Attach to Dart Process",
				"category": "Debug"
			},
			{
				"command": "flutter.profileApp",
				"title": "Profile Flutter app",
				"category": "Debug"
			},
			{
				"command": "flutter.attach",
				"title": "Attach to Flutter on Device",
				"category": "Debug"
			},
			{
				"command": "flutter.attachProcess",
				"title": "Attach to Flutter Process",
				"category": "Debug"
			},
			{
				"command": "dart.goToSuper",
				"title": "Go to Super Class/Method",
				"category": "Dart"
			},
			{
				"command": "dart.rerunLastDebugSession",
				"title": "Rerun Last Debug Session",
				"category": "Dart"
			},
			{
				"command": "dart.rerunLastTestDebugSession",
				"title": "Rerun Last Test Session",
				"category": "Dart"
			},
			{
				"command": "dart.restartAnalysisServer",
				"title": "Restart Analysis Server",
				"category": "Dart"
			},
			{
				"command": "dart.forceReanalyze",
				"title": "Reanalyze Project",
				"category": "Dart"
			},
			{
				"command": "dart.printSelectionToTerminal",
				"title": "Linkify Selected Editor Text into Terminal",
				"category": "Dart"
			},
			{
				"command": "dart.goToTestOrImplementationFile",
				"title": "Go to Test/Implementation File",
				"category": "Dart"
			},
			{
				"command": "dart.goToTests",
				"title": "Go to Tests",
				"category": "Dart"
			},
			{
				"command": "dart.startDebugging",
				"title": "Start Debugging",
				"category": "Dart",
				"icon": "$(debug-alt-small)"
			},
			{
				"command": "dart.startWithoutDebugging",
				"title": "Run Without Debugging",
				"category": "Dart",
				"icon": "$(play)"
			},
			{
				"command": "dart.createLaunchConfiguration",
				"title": "Create Launch Configuration",
				"category": "Dart"
			},
			{
				"command": "dart.sortMembers",
				"title": "Sort Members",
				"category": "Dart"
			},
			{
				"command": "dart.startLogging",
				"title": "Capture Logs",
				"category": "Dart"
			},
			{
				"command": "dart.startLoggingAnalysisServer",
				"title": "Capture Analysis Server Logs",
				"category": "Dart"
			},
			{
				"command": "dart.startLoggingDebugging",
				"title": "Capture Debugging Logs",
				"category": "Dart"
			},
			{
				"command": "dart.startLoggingExtensionOnly",
				"title": "Capture Extension Logs",
				"category": "Dart"
			},
			{
				"command": "dart.openExtensionLog",
				"title": "Open Extension Log",
				"category": "Dart"
			},
			{
				"command": "dart.stopLogging",
				"title": "Stop Capturing Logs",
				"category": "Dart"
			},
			{
				"command": "dart.completeStatement",
				"title": "Complete Statement",
				"category": "Dart"
			},
			{
				"command": "dart.showTypeHierarchy",
				"title": "Show Type Hierarchy",
				"category": "Dart"
			},
			{
				"command": "dart.openObservatory",
				"title": "Open Observatory",
				"category": "Dart"
			},
			{
				"command": "dart.openAnalyzerDiagnostics",
				"title": "Open Analyzer Diagnostics",
				"category": "Dart"
			},
			{
				"command": "dart.changeSdk",
				"title": "Change SDK",
				"category": "Dart"
			},
			{
				"command": "dart.changeFlutterSdk",
				"title": "Change SDK",
				"category": "Flutter"
			},
			{
				"command": "flutter.packages.get",
				"title": "Get Packages",
				"category": "Flutter",
				"icon": {
					"light": "./media/commands/get.svg",
					"dark": "./media/commands/get-inverse.svg"
				}
			},
			{
				"command": "flutter.packages.upgrade",
				"title": "Upgrade Packages",
				"category": "Flutter",
				"icon": {
					"light": "./media/commands/upgrade.svg",
					"dark": "./media/commands/upgrade-inverse.svg"
				}
			},
			{
				"command": "flutter.packages.upgrade.majorVersions",
				"title": "Upgrade Packages (--major-versions)",
				"category": "Flutter",
				"icon": {
					"light": "./media/commands/upgrade.svg",
					"dark": "./media/commands/upgrade-inverse.svg"
				}
			},
			{
				"command": "flutter.packages.outdated",
				"title": "List Outdated Packages",
				"category": "Flutter",
				"icon": {
					"light": "./media/commands/outdated.svg",
					"dark": "./media/commands/outdated-inverse.svg"
				}
			},
			{
				"command": "flutter.clean",
				"title": "Clean Project",
				"category": "Flutter"
			},
			{
				"command": "flutter.doctor",
				"title": "Run Flutter Doctor",
				"category": "Flutter"
			},
			{
				"command": "flutter.upgrade",
				"title": "Run Flutter Upgrade",
				"category": "Flutter"
			},
			{
				"command": "flutter.toggleDebugPainting",
				"title": "Toggle Debug Painting",
				"category": "Flutter"
			},
			{
				"command": "flutter.togglePerformanceOverlay",
				"title": "Toggle Performance Overlay",
				"category": "Flutter"
			},
			{
				"command": "flutter.overridePlatform",
				"title": "Override Platform",
				"category": "Flutter"
			},
			{
				"command": "flutter.toggleBrightness",
				"title": "Toggle Brightness",
				"category": "Flutter"
			},
			{
				"command": "flutter.toggleRepaintRainbow",
				"title": "Toggle Repaint Rainbow",
				"category": "Flutter"
			},
			{
				"command": "flutter.toggleSlowAnimations",
				"title": "Toggle Slow Animations",
				"category": "Flutter"
			},
			{
				"command": "flutter.toggleDebugModeBanner",
				"title": "Toggle Debug-Mode Banner",
				"category": "Flutter"
			},
			{
				"command": "flutter.toggleCheckElevations",
				"title": "Toggle Check Elevations",
				"category": "Flutter"
			},
			{
				"command": "flutter.togglePaintBaselines",
				"title": "Toggle Baseline Painting",
				"category": "Flutter"
			},
			{
				"command": "flutter.inspectWidget",
				"title": "Inspect Widget",
				"category": "Flutter"
			},
			{
				"command": "flutter.cancelInspectWidget",
				"title": "Cancel Widget Inspection",
				"category": "Flutter"
			},
			{
				"command": "flutter.screenshot",
				"title": "Save Screenshot",
				"category": "Flutter"
			},
			{
				"command": "_flutter.screenshot.touchBar",
				"title": "Screenshot",
				"category": "Flutter"
			},
			{
				"command": "flutter.hotRestart",
				"title": "Hot Restart",
				"category": "Flutter"
			},
			{
				"command": "flutter.hotReload",
				"title": "Hot Reload",
				"category": "Flutter",
				"icon": {
					"dark": "media/commands/hot-reload.svg",
					"light": "media/commands/hot-reload.svg"
				}
			},
			{
				"command": "_dart.hotReload.touchBar",
				"title": "Hot Reload",
				"category": "Dart",
				"icon": {
					"dark": "media/commands/hot-reload-tb.png",
					"light": "media/commands/hot-reload-tb.png"
				}
			},
			{
				"command": "dart.hotReload",
				"title": "Hot Reload",
				"category": "Dart",
				"icon": {
					"dark": "media/commands/hot-reload.svg",
					"light": "media/commands/hot-reload.svg"
				}
			},
			{
				"command": "flutter.openTimeline",
				"title": "Open Observatory Timeline",
				"category": "Flutter"
			},
			{
				"command": "dart.openDevTools",
				"title": "Open DevTools",
				"category": "Dart"
			},
			{
				"command": "flutter.openDevTools",
				"title": "Open DevTools",
				"category": "Flutter"
			},
			{
				"command": "dart.openDevToolsInspector",
				"title": "Open DevTools Widget Inspector Page",
				"category": "Flutter",
				"icon": "media/commands/inspector.svg"
			},
			{
				"command": "dart.openDevToolsPerformance",
				"title": "Open DevTools Performance Page",
				"category": "Flutter",
				"icon": "media/commands/performance.svg"
			},
			{
				"command": "dart.openDevToolsMemory",
				"title": "Open DevTools Memory Page",
				"category": "Dart"
			},
			{
				"command": "dart.openDevToolsCpuProfiler",
				"title": "Open DevTools CPU Profiler Page",
				"category": "Dart",
				"icon": "media/commands/performance.svg"
			},
			{
				"command": "dart.openDevToolsNetwork",
				"title": "Open DevTools Network Page",
				"category": "Dart"
			},
			{
				"command": "dart.openDevToolsLogging",
				"title": "Open DevTools Logging Page",
				"category": "Dart"
			},
			{
				"command": "_dart.openDevTools.touchBar",
				"title": "DevTools",
				"category": "Dart"
			},
			{
				"command": "flutter.selectDevice",
				"title": "Select Device",
				"category": "Flutter"
			},
			{
				"command": "flutter.launchEmulator",
				"title": "Launch Emulator",
				"category": "Flutter"
			},
			{
				"command": "flutter.openInAndroidStudio",
				"title": "Open in Android Studio",
				"category": "Flutter"
			},
			{
				"command": "flutter.openInXcode",
				"title": "Open in Xcode",
				"category": "Flutter"
			},
			{
				"command": "_flutter.outline.refactor.flutter.wrap.center",
				"title": "Wrap with Center",
				"category": "Flutter"
			},
			{
				"command": "_flutter.outline.refactor.flutter.wrap.padding",
				"title": "Wrap with Padding",
				"category": "Flutter"
			},
			{
				"command": "_flutter.outline.refactor.flutter.wrap.column",
				"title": "Wrap with Column",
				"category": "Flutter"
			},
			{
				"command": "_flutter.outline.refactor.flutter.wrap.row",
				"title": "Wrap with Row",
				"category": "Flutter"
			},
			{
				"command": "_flutter.outline.refactor.flutter.move.up",
				"title": "Move widget up",
				"category": "Flutter"
			},
			{
				"command": "_flutter.outline.refactor.flutter.move.down",
				"title": "Move widget down",
				"category": "Flutter"
			},
			{
				"command": "_flutter.outline.refactor.flutter.removeWidget",
				"title": "Remove this widget",
				"category": "Flutter"
			}
		],
		"keybindings": [
			{
				"command": "dart.showTypeHierarchy",
				"key": "f4",
				"mac": "f4",
				"when": "editorLangId == dart"
			},
			{
				"command": "dart.hotReload",
				"when": "inDebugMode && debugType == dart",
				"key": "ctrl+f5"
			},
			{
				"command": "dart.rerunLastDebugSession",
				"when": "dart-code:anyProjectLoaded && dart-code:hasLastDebugConfig && !inDebugMode",
				"key": "cmd+shift+f5",
				"win": "ctrl+shift+f5"
			},
			{
				"command": "dart.openDevTools",
				"when": "dart-code:anyProjectLoaded",
				"key": "ctrl+alt+d",
				"win": "ctrl+alt+d"
			}
		],
		"menus": {
			"commandPalette": [
				{
					"command": "flutter.createProject"
				},
				{
					"command": "dart.createProject"
				},
				{
					"command": "dart.startLogging",
					"when": "dart-code:anyProjectLoaded"
				},
				{
					"command": "dart.startLoggingAnalysisServer",
					"when": "dart-code:anyProjectLoaded"
				},
				{
					"command": "dart.startLoggingDebugging",
					"when": "dart-code:anyProjectLoaded"
				},
				{
					"command": "dart.startLoggingExtensionOnly",
					"when": "dart-code:anyProjectLoaded"
				},
				{
					"command": "dart.stopLogging",
					"when": "dart-code:anyProjectLoaded && dart-code:isCapturingLogs"
				},
				{
					"command": "dart.openExtensionLog",
					"when": "dart-code:anyProjectLoaded"
				},
				{
					"command": "pub.get",
					"when": "dart-code:anyProjectLoaded"
				},
				{
					"command": "dart.task.dartdoc",
					"when": "dart-code:anyProjectLoaded"
				},
				{
					"command": "pub.upgrade",
					"when": "dart-code:anyProjectLoaded"
				},
				{
					"command": "pub.upgrade.majorVersions",
					"when": "dart-code:anyProjectLoaded"
				},
				{
					"command": "pub.outdated",
					"when": "dart-code:anyProjectLoaded && dart-code:pubOutdatedSupported"
				},
				{
					"command": "dart.writeRecommendedSettings",
					"when": "dart-code:anyProjectLoaded"
				},
				{
					"command": "dart.addDependency",
					"when": "dart-code:anyProjectLoaded"
				},
				{
					"command": "dart.addDevDependency",
					"when": "dart-code:anyProjectLoaded"
				},
				{
					"command": "_dart.removeDependency",
					"when": "false"
				},
				{
					"command": "_dart.removeDependencyFromTreeNode",
					"when": "false"
				},
				{
					"command": "dart.toggleDartdocComment",
					"when": "dart-code:anyProjectLoaded"
				},
				{
					"command": "dart.startDebugging",
					"when": "false"
				},
				{
					"command": "dart.rerunLastDebugSession",
					"when": "dart-code:anyProjectLoaded && dart-code:hasLastDebugConfig"
				},
				{
					"command": "dart.rerunLastTestDebugSession",
					"when": "dart-code:anyProjectLoaded && dart-code:hasLastTestDebugConfig"
				},
				{
					"command": "dart.restartAnalysisServer",
					"when": "dart-code:anyProjectLoaded"
				},
				{
					"command": "dart.forceReanalyze",
					"when": "dart-code:anyProjectLoaded"
				},
				{
					"command": "dart.printSelectionToTerminal",
					"when": "dart-code:anyProjectLoaded && editorHasSelection"
				},
				{
					"command": "dart.goToTestOrImplementationFile",
					"when": "dart-code:anyProjectLoaded && dart-code:canGoToTestOrImplementationFile"
				},
				{
					"command": "dart.goToTests",
					"when": "false"
				},
				{
					"command": "dart.startWithoutDebugging",
					"when": "false"
				},
				{
					"command": "dart.createLaunchConfiguration",
					"when": "false"
				},
				{
					"command": "dart.goToSuper",
					"when": "dart-code:anyProjectLoaded && editorLangId == dart"
				},
				{
					"command": "dart.attach",
					"when": "dart-code:anyProjectLoaded && !inDebugMode"
				},
				{
					"command": "flutter.profileApp",
					"when": "dart-code:anyFlutterProjectLoaded && !inDebugMode"
				},
				{
					"command": "flutter.attach",
					"when": "dart-code:anyFlutterProjectLoaded && !inDebugMode && dart-code:flutterSupportsAttach"
				},
				{
					"command": "flutter.attachProcess",
					"when": "dart-code:anyFlutterProjectLoaded && !inDebugMode && dart-code:flutterSupportsAttach"
				},
				{
					"command": "dart.sortMembers",
					"when": "dart-code:anyProjectLoaded && editorLangId == dart"
				},
				{
					"command": "dart.completeStatement",
					"when": "dart-code:anyProjectLoaded && editorLangId == dart && !dart-code:isLsp"
				},
				{
					"command": "dart.showTypeHierarchy",
					"when": "dart-code:anyProjectLoaded && editorLangId == dart"
				},
				{
					"command": "dart.openObservatory",
					"when": "dart-code:anyProjectLoaded && inDebugMode && debugType == dart"
				},
				{
					"command": "dart.openAnalyzerDiagnostics",
					"when": "dart-code:anyProjectLoaded"
				},
				{
					"command": "dart.changeSdk",
					"when": "dart-code:anyProjectLoaded"
				},
				{
					"command": "dart.changeFlutterSdk",
					"when": "dart-code:anyFlutterProjectLoaded"
				},
				{
					"command": "flutter.packages.get",
					"when": "dart-code:anyFlutterProjectLoaded"
				},
				{
					"command": "flutter.packages.upgrade",
					"when": "dart-code:anyFlutterProjectLoaded"
				},
				{
					"command": "flutter.packages.upgrade.majorVersions",
					"when": "dart-code:anyFlutterProjectLoaded"
				},
				{
					"command": "flutter.packages.outdated",
					"when": "dart-code:anyFlutterProjectLoaded && dart-code:pubOutdatedSupported"
				},
				{
					"command": "flutter.clean",
					"when": "dart-code:flutterMobileProjectLoaded"
				},
				{
					"command": "flutter.doctor"
				},
				{
					"command": "flutter.upgrade"
				},
				{
					"command": "flutter.toggleDebugPainting",
					"when": "inDebugMode && debugType == dart && dart-code:serviceExtension.ext.flutter.debugPaint"
				},
				{
					"command": "flutter.togglePerformanceOverlay",
					"when": "inDebugMode && debugType == dart && dart-code:serviceExtension.ext.flutter.showPerformanceOverlay"
				},
				{
					"command": "flutter.overridePlatform",
					"when": "inDebugMode && debugType == dart && dart-code:serviceExtension.ext.flutter.platformOverride"
				},
				{
					"command": "flutter.toggleBrightness",
					"when": "inDebugMode && debugType == dart && dart-code:serviceExtension.ext.flutter.brightnessOverride"
				},
				{
					"command": "flutter.toggleRepaintRainbow",
					"when": "inDebugMode && debugType == dart && dart-code:serviceExtension.ext.flutter.repaintRainbow"
				},
				{
					"command": "flutter.toggleSlowAnimations",
					"when": "inDebugMode && debugType == dart && dart-code:serviceExtension.ext.flutter.timeDilation"
				},
				{
					"command": "flutter.toggleDebugModeBanner",
					"when": "inDebugMode && debugType == dart && dart-code:serviceExtension.ext.flutter.debugAllowBanner"
				},
				{
					"command": "flutter.toggleCheckElevations",
					"when": "inDebugMode && debugType == dart && dart-code:serviceExtension.ext.flutter.debugCheckElevationsEnabled"
				},
				{
					"command": "flutter.togglePaintBaselines",
					"when": "inDebugMode && debugType == dart && dart-code:serviceExtension.ext.flutter.debugPaintBaselinesEnabled"
				},
				{
					"command": "flutter.inspectWidget",
					"when": "inDebugMode && debugType == dart && !dart-code:flutter.isInspectingWidget"
				},
				{
					"command": "flutter.cancelInspectWidget",
					"when": "inDebugMode && debugType == dart && dart-code:flutter.isInspectingWidget"
				},
				{
					"command": "flutter.hotRestart",
					"when": "dart-code:anyFlutterProjectLoaded && inDebugMode && debugType == dart && dart-code:service.hotRestart"
				},
				{
					"command": "flutter.hotReload",
					"when": "dart-code:anyFlutterProjectLoaded && inDebugMode && debugType == dart && dart-code:service.reloadSources"
				},
				{
					"command": "_dart.hotReload.touchBar",
					"when": "false"
				},
				{
					"command": "flutter.openTimeline",
					"when": "dart-code:anyFlutterProjectLoaded && inDebugMode && debugType == dart"
				},
				{
					"command": "dart.hotReload",
					"when": "inDebugMode && debugType == dart"
				},
				{
					"command": "dart.openDevTools",
					"when": "dart-code:anyProjectLoaded"
				},
				{
					"command": "flutter.openDevTools",
					"when": "dart-code:anyProjectLoaded && dart-code:anyFlutterProjectLoaded"
				},
				{
					"command": "dart.openDevToolsInspector",
					"when": "dart-code:anyProjectLoaded && inDebugMode && debugType == dart && dart-code:anyFlutterProjectLoaded"
				},
				{
					"command": "dart.openDevToolsPerformance",
					"when": "dart-code:anyProjectLoaded && inDebugMode && debugType == dart && dart-code:anyFlutterProjectLoaded"
				},
				{
					"command": "dart.openDevToolsMemory",
					"when": "dart-code:anyProjectLoaded && inDebugMode && debugType == dart"
				},
				{
					"command": "dart.openDevToolsCpuProfiler",
					"when": "dart-code:anyProjectLoaded && inDebugMode && debugType == dart"
				},
				{
					"command": "dart.openDevToolsNetwork",
					"when": "dart-code:anyProjectLoaded && inDebugMode && debugType == dart"
				},
				{
					"command": "dart.openDevToolsLogging",
					"when": "dart-code:anyProjectLoaded && inDebugMode && debugType == dart"
				},
				{
					"command": "_dart.openDevTools.touchBar",
					"when": "false"
				},
				{
					"command": "flutter.selectDevice",
					"when": "dart-code:anyFlutterProjectLoaded"
				},
				{
					"command": "flutter.launchEmulator",
					"when": "dart-code:anyFlutterProjectLoaded && dart-code:isRunningLocally || dart-code:anyFlutterProjectLoaded && config.dart.flutterShowEmulators == always"
				},
				{
					"when": "false",
					"command": "_flutter.outline.refactor.flutter.wrap.center"
				},
				{
					"when": "false",
					"command": "_flutter.outline.refactor.flutter.wrap.padding"
				},
				{
					"when": "false",
					"command": "_flutter.outline.refactor.flutter.wrap.column"
				},
				{
					"when": "false",
					"command": "_flutter.outline.refactor.flutter.wrap.row"
				},
				{
					"when": "false",
					"command": "_flutter.outline.refactor.flutter.move.up"
				},
				{
					"when": "false",
					"command": "_flutter.outline.refactor.flutter.move.down"
				},
				{
					"when": "false",
					"command": "_flutter.outline.refactor.flutter.removeWidget"
				},
				{
					"command": "flutter.openInAndroidStudio",
					"when": "false"
				},
				{
					"command": "flutter.openInXcode",
					"when": "false"
				},
				{
					"command": "flutter.screenshot",
					"when": "dart-code:anyFlutterProjectLoaded && inDebugMode && debugType == dart"
				},
				{
					"command": "_flutter.screenshot.touchBar",
					"when": "false"
				}
			],
			"debug/toolBar": [
				{
					"command": "dart.hotReload",
					"group": "navigation@59",
					"when": "inDebugMode && debugType == dart"
				},
				{
					"command": "dart.openDevToolsInspector",
					"group": "navigation@90",
					"when": "dart-code:anyFlutterProjectLoaded && inDebugMode && debugType == dart && dart-code:isInFlutterDebugModeDebugSession && config.dart.showDevToolsDebugToolBarButtons"
				},
				{
					"command": "dart.openDevToolsPerformance",
					"group": "navigation@90",
					"when": "dart-code:anyFlutterProjectLoaded && inDebugMode && debugType == dart && dart-code:isInFlutterProfileModeDebugSession && config.dart.showDevToolsDebugToolBarButtons"
				},
				{
					"command": "dart.openDevToolsCpuProfiler",
					"group": "navigation@90",
					"when": "!dart-code:anyFlutterProjectLoaded && inDebugMode && debugType == dart && config.dart.showDevToolsDebugToolBarButtons"
				}
			],
			"touchBar": [
				{
					"command": "_dart.hotReload.touchBar",
					"when": "inDebugMode && debugType == dart",
					"group": "9_debug@5"
				},
				{
					"command": "_dart.openDevTools.touchBar",
					"when": "inDebugMode && debugType == dart",
					"group": "92_debug_tools"
				},
				{
					"command": "_flutter.screenshot.touchBar",
					"when": "dart-code:anyFlutterProjectLoaded && inDebugMode && debugType == dart",
					"group": "93_utils"
				}
			],
			"editor/title/run": [
				{
					"when": "resourceLangId == dart && dart-code:anyProjectLoaded && dart-code:currentFileIsRunnable",
					"command": "dart.startDebugging",
					"group": "1_run@10"
				},
				{
					"when": "resourceLangId == dart && dart-code:anyProjectLoaded && dart-code:currentFileIsRunnable",
					"command": "dart.startWithoutDebugging",
					"group": "1_run@20"
				}
			],
			"editor/title": [
				{
					"when": "resourceFilename == pubspec.yaml && dart-code:anyProjectLoaded && !dart-code:anyFlutterProjectLoaded",
					"command": "pub.get",
					"group": "navigation@1"
				},
				{
					"when": "resourceFilename == pubspec.yaml && dart-code:anyProjectLoaded && !dart-code:anyFlutterProjectLoaded",
					"command": "pub.upgrade",
					"alt": "pub.upgrade.majorVersions",
					"group": "navigation@2"
				},
				{
					"when": "resourceFilename == pubspec.yaml && dart-code:anyProjectLoaded && !dart-code:anyFlutterProjectLoaded",
					"command": "pub.outdated",
					"group": "navigation@3"
				},
				{
					"when": "resourceFilename == pubspec.yaml && dart-code:anyFlutterProjectLoaded",
					"command": "flutter.packages.get",
					"group": "navigation@1"
				},
				{
					"when": "resourceFilename == pubspec.yaml && dart-code:anyFlutterProjectLoaded",
					"command": "flutter.packages.upgrade",
					"alt": "flutter.packages.upgrade.majorVersions",
					"group": "navigation@2"
				},
				{
					"when": "resourceFilename == pubspec.yaml && dart-code:anyFlutterProjectLoaded",
					"command": "flutter.packages.outdated",
					"group": "navigation@3"
				},
				{
					"when": "resourceFilename == dartdoc_options.yaml && dart-code:anyProjectLoaded",
					"command": "dart.task.dartdoc",
					"group": "navigation@1"
				}
			],
			"editor/context": [
				{
					"when": "resourceFilename == pubspec.yaml && dart-code:anyProjectLoaded && !dart-code:anyFlutterProjectLoaded",
					"command": "pub.get"
				},
				{
					"when": "resourceFilename == pubspec.yaml && dart-code:anyProjectLoaded && !dart-code:anyFlutterProjectLoaded",
					"command": "pub.upgrade"
				},
				{
					"when": "resourceFilename == pubspec.yaml && dart-code:anyProjectLoaded && !dart-code:anyFlutterProjectLoaded",
					"command": "pub.upgrade.majorVersions"
				},
				{
					"when": "resourceFilename == pubspec.yaml && dart-code:anyProjectLoaded && !dart-code:anyFlutterProjectLoaded && dart-code:pubOutdatedSupported",
					"command": "pub.outdated"
				},
				{
					"when": "resourceFilename == pubspec.yaml && dart-code:anyFlutterProjectLoaded",
					"command": "flutter.packages.get"
				},
				{
					"when": "resourceFilename == pubspec.yaml && dart-code:anyFlutterProjectLoaded",
					"command": "flutter.packages.upgrade"
				},
				{
					"when": "resourceFilename == pubspec.yaml && dart-code:anyFlutterProjectLoaded",
					"command": "flutter.packages.upgrade.majorVersions"
				},
				{
					"when": "resourceFilename == pubspec.yaml && dart-code:anyFlutterProjectLoaded && dart-code:pubOutdatedSupported",
					"command": "flutter.packages.outdated"
				},
				{
					"when": "resourceFilename == dartdoc_options.yaml && dart-code:anyProjectLoaded",
					"command": "dart.task.dartdoc"
				}
			],
			"explorer/context": [
				{
					"when": "resourceFilename == pubspec.yaml && dart-code:anyProjectLoaded && !dart-code:anyFlutterProjectLoaded",
					"command": "pub.get"
				},
				{
					"when": "resourceFilename == pubspec.yaml && dart-code:anyProjectLoaded && !dart-code:anyFlutterProjectLoaded",
					"command": "pub.upgrade"
				},
				{
					"when": "resourceFilename == pubspec.yaml && dart-code:anyProjectLoaded && !dart-code:anyFlutterProjectLoaded",
					"command": "pub.upgrade.majorVersions"
				},
				{
					"when": "resourceFilename == pubspec.yaml && dart-code:anyProjectLoaded && !dart-code:anyFlutterProjectLoaded && dart-code:pubOutdatedSupported",
					"command": "pub.outdated"
				},
				{
					"when": "resourceFilename == pubspec.yaml && dart-code:anyFlutterProjectLoaded",
					"command": "flutter.packages.get"
				},
				{
					"when": "resourceFilename == pubspec.yaml && dart-code:anyFlutterProjectLoaded",
					"command": "flutter.packages.upgrade"
				},
				{
					"when": "resourceFilename == pubspec.yaml && dart-code:anyFlutterProjectLoaded",
					"command": "flutter.packages.upgrade.majorVersions"
				},
				{
					"when": "resourceFilename == pubspec.yaml && dart-code:anyFlutterProjectLoaded && dart-code:pubOutdatedSupported",
					"command": "flutter.packages.outdated"
				},
				{
					"when": "resourceFilename == dartdoc_options.yaml && dart-code:anyProjectLoaded",
					"command": "dart.task.dartdoc"
				},
				{
					"when": "resourceLangId == dart && dart-code:anyProjectLoaded",
					"command": "dart.startDebugging",
					"group": "4.5_exec@1"
				},
				{
					"when": "resourceLangId == dart && dart-code:anyProjectLoaded",
					"command": "dart.startWithoutDebugging",
					"group": "4.5_exec@2"
				},
				{
					"when": "resourceLangId == dart && dart-code:anyProjectLoaded",
					"command": "dart.createLaunchConfiguration",
					"group": "4.5_exec@3"
				},
				{
					"command": "flutter.openInAndroidStudio",
					"when": "explorerResourceIsFolder && resourceFilename == android && dart-code:anyFlutterProjectLoaded && dart-code:isRunningLocally",
					"group": "1.5_open_ext@1"
				},
				{
					"command": "flutter.openInXcode",
					"when": "explorerResourceIsFolder && resourceFilename == ios && dart-code:anyFlutterProjectLoaded && dart-code:dartPlatformName == mac && dart-code:isRunningLocally",
					"group": "1.5_open_ext@1"
				},
				{
					"when": "resourceLangId == dart && resourceScheme == file && resource =~ /\\/lib\\//",
					"command": "dart.goToTests",
					"group": "navigation@99"
				}
			],
			"view/title": [
				{
					"when": "view == dartFlutterOutline && dart-code:widgetSupports:refactor.flutter.wrap.center",
					"command": "_flutter.outline.refactor.flutter.wrap.center"
				},
				{
					"when": "view == dartFlutterOutline && dart-code:widgetSupports:refactor.flutter.wrap.padding",
					"command": "_flutter.outline.refactor.flutter.wrap.padding"
				},
				{
					"when": "view == dartFlutterOutline && dart-code:widgetSupports:refactor.flutter.wrap.column",
					"command": "_flutter.outline.refactor.flutter.wrap.column"
				},
				{
					"when": "view == dartFlutterOutline && dart-code:widgetSupports:refactor.flutter.wrap.row",
					"command": "_flutter.outline.refactor.flutter.wrap.row"
				},
				{
					"when": "view == dartFlutterOutline && dart-code:widgetSupports:refactor.flutter.move.up",
					"command": "_flutter.outline.refactor.flutter.move.up"
				},
				{
					"when": "view == dartFlutterOutline && dart-code:widgetSupports:refactor.flutter.move.down",
					"command": "_flutter.outline.refactor.flutter.move.down"
				},
				{
					"when": "view == dartFlutterOutline && dart-code:widgetSupports:refactor.flutter.removeWidget",
					"command": "_flutter.outline.refactor.flutter.removeWidget"
				},
				{
					"when": "view == dartDependencyTree",
					"command": "dart.addDependency",
					"group": "navigation@1"
				},
				{
					"when": "view == dartDependencyTree",
					"command": "dart.addDevDependency"
				}
			],
			"view/item/context": [
				{
					"when": "view == dartFlutterOutline && viewItem == dart-code:isSelectedWidget && dart-code:widgetSupports:refactor.flutter.wrap.center",
					"command": "_flutter.outline.refactor.flutter.wrap.center"
				},
				{
					"when": "view == dartFlutterOutline && viewItem == dart-code:isSelectedWidget && dart-code:widgetSupports:refactor.flutter.wrap.padding",
					"command": "_flutter.outline.refactor.flutter.wrap.padding"
				},
				{
					"when": "view == dartFlutterOutline && viewItem == dart-code:isSelectedWidget && dart-code:widgetSupports:refactor.flutter.wrap.column",
					"command": "_flutter.outline.refactor.flutter.wrap.column"
				},
				{
					"when": "view == dartFlutterOutline && viewItem == dart-code:isSelectedWidget && dart-code:widgetSupports:refactor.flutter.wrap.row",
					"command": "_flutter.outline.refactor.flutter.wrap.row"
				},
				{
					"when": "view == dartFlutterOutline && viewItem == dart-code:isSelectedWidget && dart-code:widgetSupports:refactor.flutter.move.up",
					"command": "_flutter.outline.refactor.flutter.move.up"
				},
				{
					"when": "view == dartFlutterOutline && viewItem == dart-code:isSelectedWidget && dart-code:widgetSupports:refactor.flutter.move.down",
					"command": "_flutter.outline.refactor.flutter.move.down"
				},
				{
					"when": "view == dartFlutterOutline && viewItem == dart-code:isSelectedWidget && dart-code:widgetSupports:refactor.flutter.removeWidget",
					"command": "_flutter.outline.refactor.flutter.removeWidget"
				},
				{
					"when": "view == dartDependencyTree && viewItem == dart-code:depDependenciesNode",
					"command": "dart.addDependency"
				},
				{
					"when": "view == dartDependencyTree && viewItem == dart-code:depDevDependenciesNode",
					"command": "dart.addDevDependency"
				},
				{
					"when": "viewItem == dart-code:depDependencyPackageNode || viewItem == dart-code:depDevDependencyPackageNode",
					"command": "_dart.removeDependencyFromTreeNode"
				}
			]
		},
		"semanticTokenScopes": [
			{
				"language": "dart",
				"scopes": {
					"annotation": [
						"variable"
					],
					"keyword": [
						"keyword"
					],
					"keyword.control": [
						"keyword.control"
					],
					"property.declaration": [
						"entity.name.function.member"
					],
					"string.escape": [
						"constant.character.escape"
					],
					"source": [
						"meta.embedded"
					]
				}
			}
		],
		"viewsContainers": {
			"activitybar": [
				{
					"id": "flutter",
					"title": "Flutter",
					"icon": "media/icons/flutter_activity_bar.svg"
				}
			]
		},
		"views": {
			"explorer": [
				{
					"id": "dartDependencyTree",
					"name": "Dependencies",
					"when": "dart-code:anyProjectLoaded"
				}
			],
			"flutter": [
				{
					"id": "dartFlutterOutline",
					"name": "Outline",
					"when": "dart-code:anyFlutterProjectLoaded && dart-code:showFlutterOutline"
				}
			]
		},
		"configurationDefaults": {
			"[dart]": {
				"editor.tabSize": 2,
				"editor.insertSpaces": true,
				"editor.detectIndentation": false,
				"editor.suggest.insertMode": "replace"
			},
			"files.watcherExclude": {
				"**/.dart_tool": true
			}
		},
		"configuration": [
			{
				"title": "Analyzer",
				"properties": {
					"dart.additionalAnalyzerFileExtensions": {
						"type": "array",
						"default": [],
						"description": "Additional file extensions that should be analyzed (usually used in combination with analyzer plugins).",
						"items": {
							"type": "string"
						},
						"scope": "window"
					},
					"dart.analysisExcludedFolders": {
						"type": "array",
						"default": [],
						"description": "An array of paths to be excluded from Dart analysis. This option should usually be set at the Workspace level. Excluded folders will also be ignored when detecting project types.",
						"items": {
							"type": "string"
						},
						"scope": "resource"
					},
					"dart.analyzeAngularTemplates": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Whether to enable analysis for AngularDart templates (requires the Angular analyzer plugin to be enabled in `analysis_options.yaml`).",
						"scope": "window"
					},
					"dart.analyzerAdditionalArgs": {
						"type": "array",
						"default": [],
						"description": "Additional arguments to pass to the Dart analysis server.",
						"scope": "window",
						"items": {
							"type": "string"
						}
					},
					"dart.analyzerDiagnosticsPort": {
						"type": [
							"null",
							"number"
						],
						"default": null,
						"description": "The port number to be used for the Dart analyzer diagnostic server.",
						"scope": "window"
					},
					"dart.analyzerPath": {
						"type": [
							"null",
							"string"
						],
						"default": null,
						"description": "The path to a custom Dart analysis server.",
						"scope": "machine-overridable"
					},
					"dart.analyzerSshHost": {
						"type": [
							"null",
							"string"
						],
						"default": null,
						"description": "An SSH host to run the analysis server.\nThis can be useful when modifying code on a remote machine using SSHFS.",
						"scope": "window"
					},
					"dart.analyzerVmServicePort": {
						"type": [
							"null",
							"number"
						],
						"default": null,
						"description": "The port number to be used for the Dart analysis server VM service.",
						"scope": "window"
					},
					"dart.notifyAnalyzerErrors": {
						"type": "boolean",
						"default": true,
						"description": "Whether to show a notification the first few times an analysis server exception occurs.",
						"scope": "window"
					},
					"dart.onlyAnalyzeProjectsWithOpenFiles": {
						"type": "boolean",
						"default": false,
						"description": "Whether to ignore workspace folders and perform analysis based on the open files, as if no workspace was open at all. This allows opening large folders without causing them to be completely analyzed.",
						"scope": "window"
					},
					"dart.showTodos": {
						"type": "boolean",
						"default": true,
						"description": "Whether to show TODOs in the Problems list.",
						"scope": "window"
					},
					"dart.useLsp": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Whether to run the analyzer in [LSP mode](https://microsoft.github.io/language-server-protocol/). Some features are not supported if this setting is disabled and in a future release LSP will be the only supported option.",
						"scope": "window"
					}
				}
			},
			{
				"title": "DevTools",
				"properties": {
					"dart.updateDevTools": {
						"type": "boolean",
						"default": true,
						"description": "Whether to update DevTools if you are not using the latest version. This only applies to SDKs prior to Dart v2.15, since DevTools is included in the SDK since v2.15.",
						"scope": "window"
					},
					"dart.devToolsBrowser": {
						"enum": [
							"chrome",
							"default"
						],
						"enumDescriptions": [
							"Locate and launch Google Chrome from your system",
							"Use your systems default web browser"
						],
						"default": "chrome",
						"description": "Whether to launch external DevTools windows using Chrome or the system default browser.",
						"scope": "window"
					},
					"dart.devToolsPort": {
						"type": [
							"null",
							"number"
						],
						"default": null,
						"description": "The port number to be used for the Dart DevTools.",
						"scope": "window"
					},
					"dart.devToolsReuseWindows": {
						"type": "boolean",
						"default": true,
						"description": "Whether to try to reuse existing DevTools windows instead of launching new ones. Only works for instances of DevTools launched by the DevTools server on the local machine.",
						"scope": "window"
					},
					"dart.devToolsTheme": {
						"enum": [
							"dark",
							"light"
						],
						"default": "dark",
						"description": "The theme to use for Dart DevTools.",
						"scope": "window"
					},
					"dart.embedDevTools": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Whether to load [Dart DevTools](https://dart.dev/tools/dart-devtools) embedded inside VS Code.",
						"scope": "window"
					},
					"dart.openDevTools": {
						"enum": [
							"never",
							"flutter",
							"always"
						],
						"enumDescriptions": [
							"Do not automatically launch DevTools when starting a debug session",
							"Automatically launch DevTools when starting a Flutter debug session",
							"Automatically launch DevTools when starting any debug session"
						],
						"default": "never",
						"description": "Whether to automatically open DevTools at the start of a debug session. If embedded DevTools is enabled, this will launch the Widget Inspector embedded for Flutter projects, or launch DevTools externally in a browser for Dart projects.",
						"scope": "window"
					},
					"dart.shareDevToolsWithFlutter": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Whether to eagerly run DevTools for Flutter workspaces and share the spawned server with `flutter run`.",
						"scope": "window"
					},
					"dart.showInspectorNotificationsForWidgetErrors": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Whether to show notifications for widget errors that offer Inspect Widget links. This requires that the `#dart.shareDevToolsWithFlutter#` setting is also enabled.",
						"scope": "window"
					}
				}
			},
			{
				"title": "Editor",
				"properties": {
					"dart.analysisServerFolding": {
						"type": "boolean",
						"default": true,
						"description": "Whether to use folding data from the Dart analysis server instead of the built-in VS Code indent-based folding.",
						"scope": "window"
					},
					"dart.autoImportCompletions": {
						"type": "boolean",
						"default": true,
						"description": "Whether to include symbols that have not been imported in the code completion list and automatically insert the required import when selecting them (requires restart).",
						"scope": "window"
					},
					"dart.automaticCommentSlashes": {
						"enum": [
							"none",
							"tripleSlash",
							"all"
						],
						"default": "tripleSlash",
						"markdownDescription": "Determines when to insert comment slashes when pressing `<enter>` in the editor (requires restart).\n\nWhen using `tripleSlash`, double-slashes will still be included when breaking existing double-slash comments across additional lines.",
						"enumDescriptions": [
							"Never insert slashes automatically",
							"Insert `///` when pressing `<enter>` at the end of a triple-slash comment",
							"Insert `///` when pressing `<enter>` at the end of a triple-slash comment and also `//` when pressing `<enter>` at the end of a double-slash comment"
						],
						"scope": "window"
					},
					"dart.closingLabels": {
						"type": "boolean",
						"default": true,
						"description": "Whether to show annotations against constructor, method invocations and lists that span multiple lines.",
						"scope": "window"
					},
					"dart.completeFunctionCalls": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Whether to insert parentheses and placeholders for positional and required arguments during code completions when using LSP. This feature is automatically disabled if commit characters are enabled.",
						"scope": "resource"
					},
					"dart.doNotFormat": {
						"type": "array",
						"default": [],
						"markdownDescription": "An array of glob patterns that should be excluded for formatting. The pattern is matched against the absolute path of the file. Use `**/test/**` to skip formatting for all test directories.",
						"items": {
							"type": "string"
						},
						"scope": "resource"
					},
					"dart.enableCompletionCommitCharacters": {
						"type": "boolean",
						"default": false,
						"markdownDescription": "Whether to automatically commit the selected completion item when pressing certain keys such as . , ( and [. This setting does not currently apply to LSP, see `#dart.previewCommitCharacters#`.",
						"scope": "resource"
					},
					"dart.enableSdkFormatter": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Whether to enable the [dart_style](https://pub.dev/packages/dart_style) formatter for Dart code.",
						"scope": "window"
					},
					"dart.enableSnippets": {
						"type": "boolean",
						"default": true,
						"description": "Whether to include Dart and Flutter snippets in code completion.",
						"scope": "window"
					},
					"dart.insertArgumentPlaceholders": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Whether to insert argument placeholders during code completions. This feature is automatically disabled when `enableCompletionCommitCharacters` is enabled.",
						"scope": "resource"
					},
					"dart.lineLength": {
						"type": "integer",
						"default": 80,
						"description": "The maximum length of a line of code. This is used by the document formatter.",
						"scope": "resource"
					},
					"dart.lspSnippetTextEdits": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Whether to enable [Snippet support in LSP TextEdits](https://github.com/rust-analyzer/rust-analyzer/blob/979e788957ced1957ee9ac1da70fb97abf9fe2b1/docs/dev/lsp-extensions.md#snippet-textedit).",
						"scope": "window"
					},
					"dart.renameFilesWithClasses": {
						"default": "never",
						"enum": [
							"never",
							"prompt",
							"always"
						],
						"markdownDescription": "Whether to rename files when renaming classes with matching names (for example renaming 'class Person' inside 'person.dart'). If set to 'prompt', will ask each time before renaming. If set to 'always', the file will automatically be renamed. This setting requires using LSP and a Dart SDK of at least v2.15.",
						"scope": "window"
					},
					"dart.showDartPadSampleCodeLens": {
						"type": "boolean",
						"default": true,
						"description": "Whether to show CodeLens actions in the editor for opening online DartPad samples.",
						"scope": "window"
					},
					"dart.showIgnoreQuickFixes": {
						"type": "boolean",
						"default": true,
						"description": "Whether to show quick fixes for ignoring hints and lints.",
						"scope": "window"
					},
					"dart.showMainCodeLens": {
						"type": "boolean",
						"default": true,
						"description": "Whether to show CodeLens actions in the editor for quick running / debugging scripts with main functions.",
						"scope": "window"
					},
					"dart.showTestCodeLens": {
						"type": "boolean",
						"default": true,
						"description": "Whether to show CodeLens actions in the editor for quick running / debugging tests.",
						"scope": "window"
					},
					"dart.updateImportsOnRename": {
						"type": "boolean",
						"default": true,
						"description": "Whether to automatically update imports when moving or renaming files. Currently only supports single file moves / renames.",
						"scope": "window"
					},
					"dart.warnWhenEditingFilesOutsideWorkspace": {
						"type": "boolean",
						"default": true,
						"description": "Whether to show a warning when modifying files outside of the workspace.",
						"scope": "window"
					},
					"dart.warnWhenEditingFilesInPubCache": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Whether to show a warning when modifying files in the [system package cache](https://dart.dev/tools/pub/glossary#system-cache) directory.",
						"scope": "window"
					}
				}
			},
			{
				"title": "Flutter",
				"properties": {
					"dart.flutterAdbConnectOnChromeOs": {
						"type": "boolean",
						"default": false,
						"markdownDescription": "Whether to automatically run `adb connect 100.115.92.2:5555` when spawning the Flutter daemon when running on Chrome OS.",
						"scope": "window"
					},
					"dart.flutterAdditionalArgs": {
						"type": "array",
						"default": [],
						"markdownDescription": "Additional args to pass to all `flutter` commands including `flutter daemon`. Do not use this to pass arguments to your Flutter app, use the `args` field in a `launch.json` or the `#dart.flutterRunAdditionalArgs#` setting.",
						"scope": "resource",
						"items": {
							"type": "string"
						}
					},
					"dart.flutterAttachAdditionalArgs": {
						"type": "array",
						"default": [],
						"markdownDescription": "Additional args to pass to the `flutter attach` command. Using the `args`/`toolArgs` fields in `launch.json` is usually better than this setting as this setting will apply to _all_ projects.",
						"scope": "resource",
						"items": {
							"type": "string"
						}
					},
					"dart.flutterCreateAndroidLanguage": {
						"enum": [
							"java",
							"kotlin"
						],
						"default": "kotlin",
						"description": "The programming language to use for Android apps when creating new projects using the 'Flutter: New Project' command.",
						"scope": "window"
					},
					"dart.flutterCreateIOSLanguage": {
						"enum": [
							"objc",
							"swift"
						],
						"default": "swift",
						"description": "The programming language to use for iOS apps when creating new projects using the 'Flutter: New Project' command.",
						"scope": "window"
					},
					"dart.flutterCreateOffline": {
						"type": "boolean",
						"default": false,
						"description": "Whether to use offline mode when creating new projects with the 'Flutter: New Project' command.",
						"scope": "window"
					},
					"dart.flutterCreateOrganization": {
						"type": [
							"null",
							"string"
						],
						"default": null,
						"markdownDescription": "The organization responsible for your new Flutter project, in reverse domain name notation (e.g. `com.google`). This string is used in Java package names and as prefix in the iOS bundle identifier when creating new projects using the 'Flutter: New Project' command.",
						"scope": "window"
					},
					"dart.flutterCustomEmulators": {
						"type": "array",
						"default": [],
						"description": "Custom emulators to show in the emulator list for easier launching. If IDs match existing emulators returned by Flutter, the custom emulators will override them.",
						"items": {
							"type": "object",
							"properties": {
								"id": {
									"type": "string"
								},
								"name": {
									"type": "string"
								},
								"executable": {
									"type": "string"
								},
								"args": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"env": {}
							}
						},
						"scope": "window"
					},
					"dart.flutterGutterIcons": {
						"type": "boolean",
						"default": true,
						"description": "Whether to show Flutter icons and colors in the editor gutter.",
						"scope": "window"
					},
					"dart.flutterHotReloadOnSave": {
						"enum": [
							"never",
							"always",
							"manual"
						],
						"enumDescriptions": [
							"Do not reload when saving",
							"Reload for all saves, manual or automatic",
							"Only reload for manual saves (requires pressing Save explicitly if using autosave)"
						],
						"default": "manual",
						"markdownDescription": "Whether to automatically send a Hot Reload request to Flutter apps during a debug session when saving files. Dart apps are controlled by the hotReloadOnSave setting.",
						"scope": "window"
					},
					"dart.hotReloadOnSave": {
						"enum": [
							"never",
							"always",
							"manual"
						],
						"enumDescriptions": [
							"Do not reload when saving",
							"Reload for all saves, manual or automatic",
							"Only reload for manual saves (requires pressing Save explicitly if using autosave)"
						],
						"default": "never",
						"markdownDescription": "Whether to automatically send a Hot Reload request to Dart apps during a debug session when saving files. Flutter apps are controlled by the flutterHotReloadOnSave setting.",
						"scope": "window"
					},
					"dart.flutterHotRestartOnSave": {
						"type": "boolean",
						"default": true,
						"description": "Whether to automatically send a Hot Restart request during a debug session when saving files if Hot Reload is not available but Hot Restart is.",
						"scope": "window"
					},
					"dart.flutterOutline": {
						"type": "boolean",
						"default": true,
						"description": "Whether to show the Flutter Outline tree in the sidebar.",
						"scope": "window"
					},
					"dart.flutterRunAdditionalArgs": {
						"type": "array",
						"default": [],
						"markdownDescription": "Additional args to pass to the `flutter run` command. Using the `args`/`toolArgs` fields in `launch.json` is usually better than this setting as this setting will apply to _all_ projects.",
						"scope": "resource",
						"items": {
							"type": "string"
						}
					},
					"dart.flutterScreenshotPath": {
						"type": [
							"null",
							"string"
						],
						"default": null,
						"description": "The path to a directory to save Flutter screenshots.",
						"scope": "machine-overridable"
					},
					"dart.flutterSelectDeviceWhenConnected": {
						"type": "boolean",
						"default": true,
						"description": "Whether to set newly connected devices as the current device in Flutter projects.",
						"scope": "window"
					},
					"dart.flutterShowEmulators": {
						"enum": [
							"local",
							"always"
						],
						"enumDescriptions": [
							"Only show for local workspaces",
							"Always show, even for remote sessions"
						],
						"default": "local",
						"markdownDescription": "When to show the Flutter emulators. These are usually hidden for remote workspaces because it is usually not possible to see or interact with emulators in a remote session. If you are using remoting/containers in a way that you can interact with launched emulator processes, you may wish to set this to 'always'.",
						"scope": "window"
					},
					"dart.flutterShowWebServerDevice": {
						"enum": [
							"remote",
							"always"
						],
						"enumDescriptions": [
							"Only show for remote workspaces (includes browser-based workspaces)",
							"Always show, even for local sessions"
						],
						"default": "remote",
						"markdownDescription": "When to show the Flutter headless web-server device. This requires using the Dart Debug extension for Chrome and is usually only used for remote environments where Chrome is not available such as browser/cloud-based IDEs (requires restart).",
						"scope": "window"
					},
					"dart.flutterStructuredErrors": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Whether to use Flutter's [structured error support](https://medium.com/flutter/improving-flutters-error-messages-e098513cecf9) for improved error display.",
						"scope": "resource"
					},
					"dart.flutterTestAdditionalArgs": {
						"type": "array",
						"default": [],
						"markdownDescription": "Additional args to pass to the `flutter test` command. Using the `args`/`toolArgs` fields in `launch.json` is usually better than this setting as this setting will apply to _all_ projects.",
						"scope": "resource",
						"items": {
							"type": "string"
						}
					},
					"dart.flutterTrackWidgetCreation": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Whether to pass `--track-widget-creation` to Flutter apps (required to support 'Inspect Widget'). This setting is always ignored when running in Profile or Release mode.",
						"scope": "resource"
					},
					"dart.flutterWebRenderer": {
						"enum": [
							"auto",
							"html",
							"canvaskit"
						],
						"enumDescriptions": [
							"Allow Flutter to pick the best renderer based on the users device",
							"Always use the HTML renderer",
							"Always use the CanvasKit renderer"
						],
						"default": "auto",
						"markdownDescription": "Sets the [Web renderer](https://flutter.dev/docs/development/tools/web-renderers) used for Flutter web apps.",
						"scope": "window"
					}
				}
			},
			{
				"title": "Logging",
				"properties": {
					"dart.analyzerInstrumentationLogFile": {
						"type": [
							"null",
							"string"
						],
						"default": null,
						"description": "The path to a log file for very detailed logging in the Dart analysis server that may be useful when trying to diagnose analysis server issues.",
						"scope": "machine-overridable"
					},
					"dart.analyzerLogFile": {
						"type": [
							"null",
							"string"
						],
						"default": null,
						"description": "The path to a log file for communication between Dart Code and the analysis server.",
						"scope": "machine-overridable"
					},
					"dart.dapLogFile": {
						"type": [
							"null",
							"string"
						],
						"default": null,
						"markdownDescription": "The path to a log file for communication with the DAP debug adapters. This is useful when trying to diagnose issues with debugging such as missed breakpoints.",
						"scope": "machine-overridable"
					},
					"dart.devToolsLogFile": {
						"type": [
							"null",
							"string"
						],
						"default": null,
						"description": "The path to a low-traffic log file for the Dart DevTools service.",
						"scope": "machine-overridable"
					},
					"dart.extensionLogFile": {
						"type": [
							"null",
							"string"
						],
						"default": null,
						"description": "The path to a low-traffic log file for basic extension and editor issues.",
						"scope": "machine-overridable"
					},
					"dart.flutterDaemonLogFile": {
						"type": [
							"null",
							"string"
						],
						"default": null,
						"markdownDescription": "The path to a log file for the `flutter daemon` service, which provides information about connected devices to show in the status bar.",
						"scope": "machine-overridable"
					},
					"dart.flutterRunLogFile": {
						"type": [
							"null",
							"string"
						],
						"default": null,
						"markdownDescription": "The path to a log file for `flutter run`, which is used to launch Flutter apps from VS Code. This is useful when trying to diagnose issues with apps launching (or failing to) on simulators and devices. Use `${name}` in the log file name to prevent concurrent debug sessions overwriting each others logs.",
						"scope": "machine-overridable"
					},
					"dart.flutterTestLogFile": {
						"type": [
							"null",
							"string"
						],
						"default": null,
						"markdownDescription": "The path to a log file for `flutter test`, which is used to run unit tests from VS Code. This is useful when trying to diagnose issues with unit test executions. Use `${name}` in the log file name to prevent concurrent debug sessions overwriting each others logs.",
						"scope": "machine-overridable"
					},
					"dart.maxLogLineLength": {
						"type": "number",
						"default": 2000,
						"description": "The maximum length of a line in the log file. Lines longer than this will be truncated and suffixed with an ellipsis.",
						"scope": "window"
					},
					"dart.dartTestLogFile": {
						"type": [
							"null",
							"string"
						],
						"default": null,
						"markdownDescription": "The path to a log file for Dart test runs. This is useful when trying to diagnose issues with unit test executions. Use `${name}` in the log file name to prevent concurrent debug sessions overwriting each others logs.",
						"scope": "machine-overridable"
					},
					"dart.vmServiceLogFile": {
						"type": [
							"null",
							"string"
						],
						"default": null,
						"markdownDescription": "The path to a log file for communication between Dart Code and the VM service. This is useful when trying to diagnose issues with debugging such as missed breakpoints. Use `${name}` in the log file name to prevent concurrent debug sessions overwriting each others logs.",
						"scope": "machine-overridable"
					},
					"dart.webDaemonLogFile": {
						"type": [
							"null",
							"string"
						],
						"default": null,
						"markdownDescription": "The path to a log file for communication between Dart Code and the webdev daemon. This is useful when trying to diagnose issues with launching web apps. Use `${name`} in the log file name to prevent concurrent debug sessions overwriting each others logs.",
						"scope": "machine-overridable"
					}
				}
			},
			{
				"title": "Pub",
				"properties": {
					"dart.promptToGetPackages": {
						"type": "boolean",
						"default": true,
						"description": "Whether to prompt to get packages when opening a project with out of date packages.",
						"scope": "resource"
					},
					"dart.pubAdditionalArgs": {
						"type": "array",
						"default": [],
						"markdownDescription": "Additional args to pass to all `pub` commands.",
						"scope": "resource",
						"items": {
							"type": "string"
						}
					},
					"dart.runPubGetOnPubspecChanges": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Whether to automatically run `pub get` whenever `pubspec.yaml` is saved.",
						"scope": "resource"
					}
				}
			},
			{
				"title": "Run and Debug",
				"properties": {
					"dart.buildRunnerAdditionalArgs": {
						"type": "array",
						"default": [],
						"markdownDescription": "Additional args to pass to the `build_runner` when building/watching/serving.",
						"scope": "window",
						"items": {
							"type": "string"
						}
					},
					"dart.cliConsole": {
						"enum": [
							"debugConsole",
							"terminal",
							"externalTerminal"
						],
						"default": "debugConsole",
						"description": "Whether to run Dart CLI apps in the Debug Console or a terminal. The Debug Console has more functionality because the process is controlled by the debug adapter, but is unable to accept input from the user via stdin.",
						"enumDescriptions": [
							"Run in the Debug Console pane, using the input as a REPL to evaluate expressions",
							"Run in the VS Code integrated terminal where input will be sent to stdin",
							"Run in an external terminal where input will be sent to stdin"
						],
						"scope": "window"
					},
					"dart.debugExtensionBackendProtocol": {
						"enum": [
							"sse",
							"ws"
						],
						"enumDescriptions": [
							"Server-Sent Events",
							"WebSockets"
						],
						"default": "ws",
						"description": "The protocol to use for the Dart Debug Extension backend service and injected client. Using WebSockets can improve performance but may fail when connecting through some proxy servers.",
						"scope": "window"
					},
					"dart.debugExternalPackageLibraries": {
						"type": "boolean",
						"default": false,
						"markdownDescription": "Whether to mark external pub package libraries (including `package:flutter`) as debuggable, enabling stepping into them while debugging.",
						"scope": "window"
					},
					"dart.evaluateGettersInDebugViews": {
						"type": "boolean",
						"default": true,
						"description": "Whether to evaluate getters in order to display them in debug views (such as the Variables, Watch and Hovers views).",
						"scope": "resource"
					},
					"dart.evaluateToStringInDebugViews": {
						"type": "boolean",
						"default": true,
						"description": "Whether to call toString() on objects when rendering them in debug views (such as the Variables, Watch and Hovers views). Only applies to views of 100 or fewer values for performance reasons.",
						"scope": "window"
					},
					"dart.hotReloadProgress": {
						"enum": [
							"notification",
							"statusBar"
						],
						"enumDescriptions": [
							"Hot reload progress will be shown in a toast notification",
							"Hot reload progress will be shown only in the status bar"
						],
						"default": "notification",
						"description": "Determines how to display Hot Restart and Hot Reload progress.",
						"scope": "window"
					},
					"dart.promptToRunIfErrors": {
						"type": "boolean",
						"default": true,
						"description": "Whether to prompt before running if there are errors in your project. Test scripts will be excluded from the check unless they're the script being run.",
						"scope": "window"
					},
					"dart.showDartDeveloperLogs": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Whether to show logs from the `dart:developer` `log()` function in the debug console.",
						"scope": "resource"
					},
					"dart.showDevToolsDebugToolBarButtons": {
						"type": "boolean",
						"default": true,
						"description": "Whether to show DevTools buttons in the floating Debug toolbar.",
						"scope": "window"
					},
					"dart.suppressTestTimeouts": {
						"enum": [
							"never",
							"debug",
							"always"
						],
						"enumDescriptions": [
							"Do not suppress test timeouts",
							"Suppress test timeouts when Debugging",
							"Suppress test timeouts both when Running and Debugging"
						],
						"default": "never",
						"markdownDescription": "Whether to suppress test timeouts when running/debugging tests. This currently works by increasing the default timeout to 1d but will not affect tests that have explicit (non-factor) timeouts set with @timeout.",
						"scope": "resource"
					},
					"dart.cliAdditionalArgs": {
						"type": "array",
						"default": [],
						"markdownDescription": "Additional args to pass to the `dart` command when running CLI scripts. Using the `args`/`toolArgs` fields in `launch.json` is usually better than this setting as this setting will apply to _all_ projects.",
						"scope": "resource",
						"items": {
							"type": "string"
						}
					},
					"dart.testAdditionalArgs": {
						"type": "array",
						"default": [],
						"markdownDescription": "Additional args to pass to the `dart test` command. Using the `args`/`toolArgs` fields in `launch.json` is usually better than this setting as this setting will apply to _all_ projects.",
						"scope": "resource",
						"items": {
							"type": "string"
						}
					},
					"dart.vmAdditionalArgs": {
						"type": "array",
						"default": [],
						"description": "Additional args to pass to the Dart VM when running/debugging command line apps or Dart test scripts.",
						"scope": "resource",
						"items": {
							"type": "string"
						}
					}
				}
			},
			{
				"title": "SDK",
				"properties": {
					"dart.checkForSdkUpdates": {
						"type": "boolean",
						"default": true,
						"description": "Whether to check you are using the latest version of the Dart SDK at startup.",
						"scope": "window"
					},
					"dart.sdkPath": {
						"type": [
							"null",
							"string"
						],
						"default": null,
						"markdownDescription": "The location of the Dart SDK to use for analyzing and executing code. If blank, Dart Code will attempt to find it from the `PATH` environment variable. When editing a Flutter project, the version of Dart included in the Flutter SDK is used in preference.",
						"scope": "machine-overridable"
					},
					"dart.sdkPaths": {
						"type": "array",
						"default": [],
						"description": "An array of paths that either directly point to a Dart SDK or the parent directory of multiple Dart SDKs. When set, the version number in the status bar can be used to quickly switch between SDKs.",
						"items": {
							"type": "string"
						},
						"scope": "machine-overridable"
					},
					"dart.debugSdkLibraries": {
						"type": "boolean",
						"default": false,
						"markdownDescription": "Whether to mark Dart SDK libraries (`dart:*`) as debuggable, enabling stepping into them while debugging.",
						"scope": "window"
					},
					"dart.flutterSdkPath": {
						"type": [
							"null",
							"string"
						],
						"default": null,
						"markdownDescription": "The location of the Flutter SDK to use. If blank, Dart Code will attempt to find it from the project directory, `FLUTTER_ROOT` environment variable and the `PATH` environment variable.",
						"scope": "machine-overridable"
					},
					"dart.flutterSdkPaths": {
						"type": "array",
						"default": [],
						"description": "An array of paths that either directly point to a Flutter SDK or the parent directory of multiple Flutter SDKs. When set, the version number in the status bar can be used to quickly switch between SDKs.",
						"items": {
							"type": "string"
						},
						"scope": "machine-overridable"
					}
				}
			},
			{
				"title": "Testing",
				"properties": {
					"dart.allowTestsOutsideTestFolder": {
						"type": "boolean",
						"default": false,
						"markdownDescription": "Whether to consider files ending `_test.dart` that are outside of the test directory as tests. This should be enabled if you put tests inside the `lib` directory of your Flutter app so they will be run with `flutter test` and not `flutter run`.",
						"scope": "window"
					},
					"dart.openTestView": {
						"type": "array",
						"items": {
							"enum": [
								"testRunStart",
								"testFailure"
							]
						},
						"default": [
							"testRunStart"
						],
						"description": "When to automatically switch focus to the test list (array to support multiple values).",
						"scope": "window"
					},
					"dart.showSkippedTests": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Whether to show skipped tests in the test tree.",
						"scope": "window"
					}
				}
			},
			{
				"title": "Other",
				"order": 9,
				"properties": {
					"dart.allowAnalytics": {
						"type": "boolean",
						"default": true,
						"description": "Whether to send analytics such as startup timings, frequency of use of features and analysis server crashes.",
						"scope": "window"
					},
					"dart.env": {
						"type": "object",
						"default": {},
						"description": "Additional environment variables to be added to all Dart/Flutter processes spawned by the Dart and Flutter extensions.",
						"scope": "window"
					}
				}
			},
			{
				"title": "Experimental",
				"order": 10,
				"properties": {
					"dart.enableServerSnippets": {
						"type": "boolean",
						"default": false,
						"markdownDescription": "This setting is currently unused and should be left set to 'false'. It will be updated and enabled by default in the future.",
						"scope": "window"
					},
					"dart.normalizeFileCasing": {
						"type": "boolean",
						"default": false,
						"description": "Whether to normalize file casings before sending them to the LSP server. This may fix issues with file_names lints not disappearing after renaming a file if the VS Code API continues to use the original casing.",
						"scope": "window"
					},
					"dart.previewBazelWorkspaceCustomScripts": {
						"type": "boolean",
						"default": false,
						"markdownDescription": "EXPERIMENTAL: Whether to look for custom script definitions at `dart/config/intellij-plugins/flutter.json` in Bazel workspaces. Currently supported for macOS and Linux only.",
						"scope": "window"
					},
					"dart.previewCommitCharacters": {
						"type": "boolean",
						"default": false,
						"description": "EXPERIMENTAL: Whether to enable commit characters for the LSP server. In a future release, the dart.enableCompletionCommitCharacters setting will also apply to LSP.",
						"scope": "window"
					},
					"dart.previewFlutterUiGuides": {
						"type": "boolean",
						"default": false,
						"markdownDescription": "EXPERIMENTAL: Whether to enable the [Flutter UI Guides preview](https://dartcode.org/releases/v3-1/#preview-flutter-ui-guides).",
						"scope": "window"
					},
					"dart.previewFlutterUiGuidesCustomTracking": {
						"type": "boolean",
						"default": false,
						"description": "EXPERIMENTAL: Whether to enable custom tracking of Flutter UI guidelines (to hide some latency of waiting for the next Flutter Outline).",
						"scope": "window"
					},
					"dart.previewHotReloadOnSaveWatcher": {
						"type": "boolean",
						"default": false,
						"markdownDescription": "Whether to perform hot reload on save based on a filesystem watcher for Dart files rather than using VS Code's `onDidSave` event. This allows reloads to trigger when external tools modify Dart source files.",
						"scope": "window"
					}
				}
			}
		],
		"breakpoints": [
			{
				"language": "dart"
			}
		],
		"debuggers": [
			{
				"type": "dart",
				"label": "Dart & Flutter",
				"program": "./out/src/dist/debug.js",
				"runtime": "node",
				"languages": [
					"dart"
				],
				"configurationAttributes": {
					"launch": {
						"properties": {
							"cwd": {
								"type": "string",
								"description": "Workspace root."
							},
							"deviceId": {
								"type": "string",
								"description": "The ID of the device to launch your Flutter app on. If not supplied, will use the selected device shown in the status bar."
							},
							"console": {
								"enum": [
									"debugConsole",
									"terminal",
									"externalTerminal"
								],
								"default": "debugConsole",
								"description": "Whether to run Dart CLI apps in the Debug Console or a terminal. The Debug Console has more functionality because the process is controlled by the debug adapter, but is unable to accept input from the user via stdin."
							},
							"enableAsserts": {
								"type": "boolean",
								"markdownDescription": "Run the VM with `--asserts-enabled`.",
								"default": true
							},
							"program": {
								"type": "string",
								"markdownDescription": "Path to the script to start (e.g. `bin/main.dart` or `lib/main.dart`) or optionally a test directory to run a whole suite."
							},
							"runTestsOnDevice": {
								"type": "boolean",
								"markdownDescription": "Whether to run Flutter test scripts on a device using `flutter run` instead of `flutter test`. Only works for whole scripts, not individual tests."
							},
							"showMemoryUsage": {
								"type": "boolean",
								"description": "Show memory usage for your Flutter app in the status bar during debug sessions (if not set, will automatically show for profile builds).\n\nNote: memory usage shown in debug builds may not be indicative of usage in release builds. Use profile builds for more accurate figures when testing memory usage."
							},
							"openDevTools": {
								"description": "Which to automatically open a particular DevTools page when starting the debug session.",
								"enum": [
									"cpu-profiler",
									"memory",
									"performance",
									"network",
									"logging"
								]
							},
							"flutterMode": {
								"description": "The mode for launching the Flutter app:\n\ndebug: Turns on all assertions, includes all debug information, enables all debugger aids and optimizes for fast dev cycles\n\nrelease: Turns off all assertions, strips as much debug information as possible, turns of debugger aids and optimises for fast startup, fast execution and small package sizes.\n\nprofile: Same as release mode exept profiling aids and tracing are enabled.",
								"enum": [
									"debug",
									"release",
									"profile"
								],
								"default": "debug"
							},
							"flutterPlatform": {
								"markdownDescription": "Passes the `--target-platform` option to the `flutter run` command. Ignored on iOS.",
								"enum": [
									"default",
									"android-arm",
									"android-arm64",
									"android-x86",
									"android-x64"
								],
								"default": "default"
							},
							"templateFor": {
								"type": "string",
								"markdownDescription": "A path that indicates this is the default launch config for files within that path. Used for the default 'Run' and 'Debug' CodeLens configs, as well as running tests through the test runner. Setting to an empty string will apply to all files."
							},
							"codeLens": {
								"description": "Shows this launch config in CodeLens links for main and/or test methods.",
								"type": "object",
								"required": [
									"for"
								],
								"properties": {
									"title": {
										"markdownDescription": "Text for the CodeLens link. `${debugType}` will be replaced with 'Run' or 'Debug' depending on the link type (see 'for' property).",
										"type": "string"
									},
									"path": {
										"description": "Optionally filters this CodeLens to only files within a relative path from the workspace root.",
										"type": "string"
									},
									"for": {
										"description": "The type of entry point to show this launch config against.",
										"type": "array",
										"items": {
											"enum": [
												"run-test",
												"debug-test",
												"run-file",
												"debug-file",
												"run-test-file",
												"debug-test-file"
											]
										}
									}
								}
							},
							"args": {
								"type": "array",
								"description": "Arguments to be passed to your Dart/Flutter script on the command line. These arguments usually go after the script filename but may be inserted before for some tools where required.",
								"items": {
									"type": "string"
								}
							},
							"env": {
								"description": "Environment variables passed to the Dart / Flutter process."
							},
							"toolArgs": {
								"type": "array",
								"default": [],
								"description": "Arguments to be passed to the Dart VM/Flutter tools on the command line. Unlike `args`, these arguments always go before the script filename.",
								"items": {
									"type": "string"
								}
							}
						}
					},
					"attach": {
						"properties": {
							"cwd": {
								"type": "string",
								"description": "Workspace root."
							},
							"program": {
								"type": "string",
								"description": "Path to the entry script (eg. lib/main.dart). This is required when attaching to Flutter apps if the entry point is not lib/main.dart."
							},
							"args": {
								"type": "array",
								"description": "Arguments to be passed when attaching on the command line. These arguments are only used for attach requests that run commands (like 'flutter attach') and not if connecting directly to a VM Service URI without any tooling.",
								"items": {
									"type": "string"
								}
							},
							"deviceId": {
								"type": "string",
								"description": "The ID of the device to attach to. If not supplied, will use the selected device shown in the status bar."
							},
							"packages": {
								"type": "string",
								"description": "Path to the packages file (only required if cannot be discovered from the running process automatically)."
							},
							"vmServiceUri": {
								"type": "string",
								"description": "URI of the VM service to attach to."
							},
							"vmServiceInfoFile": {
								"type": "string",
								"markdownDescription": "File to read (expected to be written with `--write-service-info`) VM Service details from if `vmServiceUri` is not supplied."
							},
							"deleteServiceInfoFile": {
								"type": "boolean",
								"markdownDescription": "Whether to delete the file in vmServiceInfoFile after reading the contents and connecting to its VM Service."
							}
						}
					}
				},
				"configurationSnippets": [
					{
						"label": "Dart: Launch",
						"description": "Launch and debug a Dart app",
						"body": {
							"name": "Dart",
							"type": "dart",
							"request": "launch",
							"program": "^\"bin/main.dart\""
						}
					},
					{
						"label": "Dart: Attach",
						"description": "Debug an already-running Dart app",
						"body": {
							"name": "Dart: Attach to Process",
							"type": "dart",
							"request": "attach"
						}
					},
					{
						"label": "Dart: Run all Tests",
						"description": "Run all tests in a Dart app",
						"body": {
							"name": "Dart: Run all Tests",
							"type": "dart",
							"request": "launch",
							"program": "./test/"
						}
					},
					{
						"label": "Flutter: Launch",
						"description": "Launch and debug a Flutter app",
						"body": {
							"name": "Flutter",
							"type": "dart",
							"request": "launch",
							"program": "^\"lib/main.dart\""
						}
					},
					{
						"label": "Flutter: Launch in Profile Mode",
						"description": "Launch a Flutter app in profile mode",
						"body": {
							"name": "Flutter",
							"type": "dart",
							"request": "launch",
							"program": "^\"lib/main.dart\"",
							"flutterMode": "profile"
						}
					},
					{
						"label": "Flutter: Attach to Device",
						"description": "Attach to Flutter on a device",
						"body": {
							"name": "Flutter: Attach to Device",
							"type": "dart",
							"request": "attach"
						}
					},
					{
						"label": "Flutter: Run all Tests",
						"description": "Run all tests in a Flutter app",
						"body": {
							"name": "Flutter: Run all Tests",
							"type": "dart",
							"request": "launch",
							"program": "./test/"
						}
					}
				]
			}
		],
		"taskDefinitions": [
			{
				"type": "dart",
				"required": [],
				"properties": {
					"command": {
						"type": "string"
					},
					"args": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				}
			},
			{
				"type": "flutter",
				"required": [],
				"properties": {
					"command": {
						"type": "string"
					},
					"args": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				}
			}
		],
		"problemMatchers": [
			{
				"name": "dart-build_runner",
				"label": "Dart: build_runner",
				"owner": "dart",
				"source": "dart",
				"fileLocation": "relative",
				"pattern": [
					{
						"regexp": "^\\[SEVERE\\] .+ on (.+?)(?: \\(cached\\))?:$",
						"file": 1
					},
					{
						"regexp": "^$"
					},
					{
						"regexp": "^(.+)$",
						"message": 1
					},
					{
						"regexp": "^package:.*:(\\d+):(\\d+)$",
						"line": 1,
						"column": 2
					}
				],
				"background": {
					"activeOnStart": true,
					"beginsPattern": "^\\[INFO\\] Starting Build",
					"endsPattern": "^(\\[INFO\\] Succeeded|\\[SEVERE\\] Failed) after"
				}
			}
		]
	},
	"scripts": {
		"ensure-icon-submodule": "if [ ! -f media/doc-icons/material/ac_unit@2x.png ]; then exit 999; fi",
		"vscode:prepublish": "npm run ensure-icon-submodule && webpack --mode production",
		"build": "webpack --mode development",
		"build-with-instrumentation": "webpack --env instrumentation --mode development",
		"watch": "webpack --mode development --watch",
		"build-tests": "tsc -p ./tsconfig.build.json",
		"watch-non-ext": "tsc -p ./tsconfig.build.json --watch --extendedDiagnostics",
		"lint": "eslint -c .eslintrc.js --ext .ts .",
		"test": "npm run build-with-instrumentation && npm run build-tests && npm run instrument && npm run test-only && npm run report_lcov && npm run report_screen",
		"instrument": "cd out/src && nyc instrument --compact false --in-place . . && cd ../..",
		"test-only": "node ./out/src/test/test_all.js",
		"report_lcov": "nyc report -r lcovonly --report-dir coverage/$BOT",
		"report_screen": "nyc report"
	},
	"dependencies": {
		"minimatch": "^3.0.4",
		"semver": "^7.3.5",
		"vscode-debugadapter": "^1.51.0",
		"vscode-debugprotocol": "^1.51.0",
		"vscode-languageclient": "^7.0.0",
		"ws": "^7.5.6"
	},
	"devDependencies": {
		"@types/glob": "^7.2.0",
		"@types/minimatch": "^3.0.5",
		"@types/mocha": "^9.0.0",
		"@types/node": "^14.18.0",
		"@types/semver": "^7.3.9",
		"@types/sinon": "5.0.5",
		"@types/vscode": "^1.63.0",
		"@types/ws": "^7.4.7",
		"@typescript-eslint/eslint-plugin": "^4.33.0",
		"@typescript-eslint/eslint-plugin-tslint": "^4.33.0",
		"@typescript-eslint/parser": "^4.33.0",
		"@vscode/test-electron": "^1.6.2",
		"eslint": "^7.32.0",
		"glob": "^7.2.0",
		"istanbul-instrumenter-loader": "^3.0.1",
		"mocha": "^9.1.3",
		"nyc": "^15.1.0",
		"sinon": "^11.1.2",
		"source-map-support": "^0.5.21",
		"ts-loader": "^9.2.6",
		"tslint": "^6.1.3",
		"typescript": "^4.5.2",
		"vscode-debugadapter-testsupport": "^1.51.0",
		"webpack": "^5.58.1",
		"webpack-cli": "^4.9.1"
	},
	"optionalDependencies": {
		"bufferutil": "^4.0.5",
		"utf-8-validate": "^5.0.7"
	}
}
