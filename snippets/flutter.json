{
	".source.dart": {
		"Flutter Stateless Widget": {
			"prefix": "stless",
			"description": "Insert a StatelessWidget",
			"body": [
				"class $1 extends StatelessWidget {",
				"  const $1({ Key? key }) : super(key: key);",
				"",
				"  @override",
				"  Widget build(BuildContext context) {",
				"    return ${0:const Placeholder()};",
				"  }",
				"}"
			]
		},
		"Flutter Stateful Widget": {
			"prefix": "stful",
			"description": "Insert a StatefulWidget",
			"body": [
				"class $1 extends StatefulWidget {",
				"  const $1({ Key? key }) : super(key: key);",
				"",
				"  @override",
				"  State<$1> createState() => _$1State();",
				"}",
				"",
				"class _$1State extends State<$1> {",
				"  @override",
				"  Widget build(BuildContext context) {",
				"    return ${0:const Placeholder()};",
				"  }",
				"}"
			]
		},
		"Flutter Widget with AnimationController": {
			"prefix": "stanim",
			"description": "Insert a StatefulWidget with an AnimationController",
			"body": [
				"class $1 extends StatefulWidget {",
				"  const $1({ Key? key }) : super(key: key);",
				"",
				"  @override",
				"  State<$1> createState() => _$1State();",
				"}",
				"",
				"class _$1State extends State<$1>",
				"    with SingleTickerProviderStateMixin {",
				"  late AnimationController _controller;",
				"",
				"  @override",
				"  void initState() {",
				"    super.initState();",
				"    _controller = AnimationController(vsync: this);",
				"  }",
				"",
				"  @override",
				"  void dispose() {",
				"    _controller.dispose();",
				"    super.dispose();",
				"  }",
				"",
				"  @override",
				"  Widget build(BuildContext context) {",
				"    return ${0:const Placeholder()};",
				"  }",
				"}"
			]
		},
		"Flutter Inherited Widget": {
			"prefix": "inhr",
			"description": "Insert an InheritedWidget",
			"body": [
				"class $1 extends InheritedWidget {",
				"  const $1({super.key});",
				"",
				"  static $1? maybeOf(BuildContext context) {",
				"    return context.dependOnInheritedWidgetOfExactType<$1>();",
				"  }",
				"",
				"  static $1 of(BuildContext context) {",
				"    final $1? result = maybeOf(context);",
				"    assert(result != null, 'No $1 found in context');",
				"    return result!;",
				"  }",
				"",
				"  @override",
				"  bool updateShouldNotify($1 oldWidget) => ${0:true};",
				"}"
			]
		}
	}
}
